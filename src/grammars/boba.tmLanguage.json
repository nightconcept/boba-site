{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Boba",
  "scopeName": "source.boba",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#self-keyword" },
    { "include": "#keywords" },
    { "include": "#enums" },
    { "include": "#entities" },
    { "include": "#table-literals" },
    { "include": "#constants" },
    { "include": "#storage" },
    { "include": "#variables" },
    { "include": "#properties" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#numbers" },
    { "include": "#function-calls" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash",
          "match": "//.*"
        },
        {
          "name": "comment.block",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.true",
          "match": "\\b(true)\\b"
        },
        {
          "name": "constant.language.boolean.false",
          "match": "\\b(false)\\b"
        },
        {
          "name": "constant.language.null",
          "match": "\\b(null)\\b"
        },
        {
          "name": "support.type.primitive",
          "match": "\\b(string|number|function|boolean|table|void)\\b"
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "begin": "\\b(fn|private fn|pub fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)(\\()",
          "beginCaptures": {
            "1": { "name": "storage.type.function" },
            "2": { "name": "entity.name.function" },
            "3": { "name": "punctuation.definition.parameters.begin" }
          },
          "end": "(\\))",
          "endCaptures": {
            "1": { "name": "punctuation.definition.parameters.end" }
          },
          "patterns": [
            { "include": "#parameters" }
          ]
        },
        {
          "begin": "\\b(class)\\s+([a-zA-Z_][a-zA-Z0-9_]*)(?:\\s+(extends)\\s+([a-zA-Z_][a-zA-Z0-9_]*))?\\s*(=)?\\s*({)",
          "beginCaptures": {
            "1": { "name": "storage.type.class" },
            "2": { "name": "entity.name.class" },
            "3": { "name": "storage.type" },
            "4": { "name": "entity.other.inherited-class" },
            "5": { "name": "keyword.operator.assignment" },
            "6": { "name": "meta.brace.curly" }
          },
          "end": "(})",
          "endCaptures": {
            "1": { "name": "meta.brace.curly" }
          },
          "patterns": [
            { "include": "$self" }
          ]
        }
      ]
    },
    "table-literals": {
      "begin": "{",
      "end": "}",
      "beginCaptures": { "0": { "name": "meta.brace.curly" } },
      "endCaptures": { "0": { "name": "meta.brace.curly" } },
      "patterns": [
        { "include": "#table-keys" },
        { "include": "$self" }
      ]
    },
    "enums": {
      "begin": "\\b(enum)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*({)",
      "beginCaptures": {
        "1": { "name": "storage.type" },
        "2": { "name": "entity.name.type.enum" }
      },
      "end": "(})",
      "endCaptures": {
        "1": { "name": "meta.brace.curly" }
      },
      "patterns": [
        {
          "name": "support.type.primitive",
          "match": "\\b([A-Z_][A-Z0-9_]*)\\b"
        },
        { "include": "#punctuation" }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control",
          "match": "\\b(if|else|for|in|to|by|while|do|foreach|repeat|until|return|break)\\b"
        },
        {
          "name": "keyword.operator.logical",
          "match": "\\b(and|or|not)\\b"
        }
      ]
    },
    "storage":{
        "patterns": [
            {
                "name": "storage.type",
                "match": "\\b(var|const|fn|class|extends|private|pub|enum)\\b"
            }
        ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment",
          "match": "(=)"
        },
        {
          "name": "keyword.operator.relational",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic",
          "match": "(\\+\\+|--|\\+|-|\\*|/|%|\\^)"
        },
        {
          "name": "keyword.operator.piping",
          "match": "(\\|>)"
        },
        {
          "name": "keyword.operator.arrow",
          "match": "(->)"
        },
        {
          "name": "keyword.operator.new",
          "match": "\\b(new)\\b"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape",
          "match": "\\\\."
        },
        {
          "include": "#string-interpolation"
        }
      ]
    },
    "string-interpolation": {
      "begin": "(\\{)",
      "end": "(\\})",
      "beginCaptures": {
        "1": { "name": "constant.language" }
      },
      "endCaptures": {
        "1": { "name": "constant.language" }
      },
      "patterns": [
        {
          "include": "#function-calls"
        },
        {
          "include": "#properties"
        },
        {
          "name": "variable.parameter",
          "match": "[a-zA-Z_][a-zA-Z0-9_]*"
        },
        {
          "include": "#numbers"
        },
        {
          "include": "#operators"
        },
        {
          "include": "#punctuation"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement",
          "match": ";"
        },
        {
          "name": "punctuation.separator.colon",
          "match": ":"
        },
        {
            "name": "punctuation.separator.comma",
            "match": ","
        },
        {
            "name": "punctuation.accessor",
            "match": "\\."
        },
        {
          "name": "meta.brace.round",
          "match": "(\\(|\\))"
        },
        {
          "name": "meta.brace.square",
          "match": "(\\[|\\])"
        },
        {
          "name": "meta.brace.curly",
          "match": "(\\{|\\})"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric",
          "match": "\\b([0-9]+(\\.[0-9]+)?)\\b"
        }
      ]
    },
    "function-calls": {
        "patterns": [
            {
                "match": "(?<!\\.)\\b([a-zA-Z_][a-zA-Z0-9_]*)(?=\\()",
                "name": "entity.name.function"
            }
        ]
    },
    "variables": {
      "patterns": [
        {
          "name": "variable.other.constant",
          "match": "(?<=\\bconst\\s)([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "match": "(?<=:)\\s*([A-Z][a-zA-Z0-9_]*)\\b",
          "captures": {
            "1": {
              "name": "entity.name.class"
            }
          }
        }
      ]
    },
    "properties": {
      "patterns": [
        {
          "name": "entity.name.function",
          "match": "(?<=\\.)([a-zA-Z_][a-zA-Z0-9_]*)(?=\\()"
        },
        {
          "name": "source",
          "match": "(?<=\\bself\\.)([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "name": "entity.name.function",
          "match": "(?<=\\.)([A-Z_][A-Z0-9_]*)\\b"
        },
        {
          "name": "keyword.operator.new",
          "match": "(?<=\\.)([a-zA-Z_][a-zA-Z0-9_]*)"
        }
      ]
    },
    "table-keys": {
      "patterns": [
        {
          "name": "storage.type",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*:)"
        }
      ]
    },
    "self-keyword": {
      "patterns": [
        {
          "name": "entity.name.function",
          "match": "\\b(self)\\b"
        }
      ]
    },
    "parameters": {
      "patterns": [
        {
          "name": "variable.parameter",
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)(?=\\s*:)"
        },
        { "include": "#constants" },
        { "include": "#punctuation" }
      ]
    }
  }
}
