{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Boba",
  "scopeName": "source.boba",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#keywords" },
    { "include": "#entities" },
    { "include": "#constants" },
    { "include": "#storage" },
    { "include": "#operators" },
    { "include": "#punctuation" },
    { "include": "#numbers" }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.boba",
          "match": "//.*"
        },
        {
          "name": "comment.block.boba",
          "begin": "/\\*",
          "end": "\\*/",
          "patterns": [
            {
              "include": "#comments"
            }
          ]
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boba",
          "match": "\\b(true|false|null)\\b"
        },
        {
          "name": "support.type.primitive.boba",
          "match": "\\b(string|number|function|boolean|table|void)\\b"
        }
      ]
    },
    "entities": {
      "patterns": [
        {
          "name": "entity.name.function.boba",
          "match": "\\b(fn|private fn)\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "name": "entity.name.class.boba",
          "match": "\\b(class)\\s+([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
           "name": "entity.other.inherited-class.boba",
           "match": "(?<=extends\\s)([a-zA-Z_][a-zA-Z0-9_]*)"
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.boba",
          "match": "\\b(if|else|for|in|to|by|while|do|foreach|repeat|until|return|break)\\b"
        },
        {
          "name": "keyword.operator.logical.boba",
          "match": "\\b(and|or|not)\\b"
        }
      ]
    },
    "storage":{
        "patterns": [
            {
                "name": "storage.type.boba",
                "match": "\\b(var|const|fn|class|extends|private)\\b"
            },
            {
                "name": "variable.language.self.boba",
                "match": "\\b(self)\\b"
            }
        ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.assignment.boba",
          "match": "(=)"
        },
        {
          "name": "keyword.operator.relational.boba",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.boba",
          "match": "(\\+\\+|--|\\+|-|\\*|/|%|\\^)"
        },
        {
          "name": "keyword.operator.piping.boba",
          "match": "(\\|>)"
        },
        {
          "name": "keyword.operator.arrow.boba",
          "match": "(->)"
        }
      ]
    },
    "strings": {
      "name": "string.quoted.double.boba",
      "begin": "\"",
      "end": "\"",
      "patterns": [
        {
          "name": "constant.character.escape.boba",
          "match": "\\\\."
        },
        {
          "include": "#string-interpolation"
        }
      ]
    },
    "string-interpolation": {
      "name": "meta.embedded.interpolation.boba",
      "begin": "#\\{",
      "end": "\\}",
      "patterns": [
        {
          "include": "$self"
        }
      ]
    },
    "punctuation": {
      "patterns": [
        {
          "name": "punctuation.terminator.statement.boba",
          "match": ";"
        },
        {
          "name": "punctuation.separator.colon.boba",
          "match": ":"
        },
        {
            "name": "punctuation.separator.comma.boba",
            "match": ","
        },
        {
            "name": "punctuation.accessor.boba",
            "match": "\\."
        },
        {
          "name": "meta.brace.round.boba",
          "match": "(\\(|\\))"
        },
        {
          "name": "meta.brace.square.boba",
          "match": "(\\[|\\])"
        },
        {
          "name": "meta.brace.curly.boba",
          "match": "(\\{|\\})"
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.boba",
          "match": "\\b([0-9]+(\\.[0-9]+)?)\\b"
        }
      ]
    }
  }
}
