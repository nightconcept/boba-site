# Lesson: 06-loops

Loops are used to execute a block of code multiple times. Boba provides two primary loops: `for` for iterating over sequences and `while` for looping as long as a condition is true.

#### The `for` Loop: The Main Iteration Tool

The `for` loop is Boba's most powerful and common loop. It can iterate over a collection of items or a range of numbers.

**1. Iterating Over Collections** This is the idiomatic way to work with every item in a `list` or `map`.

```boba
let ingredients: string[] = ["healing potion", "sword", "shield"]

// The `for...in` loop will go through each item in the list.
for item in ingredients {
  print(f"Player inventory contains: {item}")
}
```

**2. Iterating Over a Range of Numbers** To repeat an action a specific number of times, you can use a range. A range is created with the `..` (exclusive) or `..=` (inclusive) operator. A range is a temporary sequence of numbers created on-the-fly, specifically for the purpose of iteration.

```boba
// A range from 0 up to, but not including, 5 (0, 1, 2, 3, 4).
// This will run 5 times.
for i in 0..5 {
  print(f"Executing task {i}...")
}

// An inclusive range from 1 up to, and including, 3.
for i in 1..=3 {
  print(f"This is message number {i}.")
}
// Output:
// This is message number 1.
// This is message number 2.
// This is message number 3.
```

#### The `while` Loop

The while loop continues to execute a block of code as long as a specified condition remains true. You should use a while loop when you don't know ahead of time how many times you need to loop.
```boba
var countdown = 3

    / Loop as long as countdown is greater than 0.
    while countdown > 0 {
    print(f"{countdown}...")
    countdown = countdown - 1 // Decrement the counter.
    }

    print("Liftoff!")
    // Output:
    // 3...
    // 2...
    // 1...
    // Liftoff!
```

> **A Word of Caution**
> Since a `while` loop's continuation depends on a condition you manage manually, you are responsible for ensuring the condition will eventually become `false` to prevent an infinite loop.

> #### **Time to Practice!**
>
> Iteration is fundamental to programming. Your next exercises will have you using `for` and `while` loops to process collections and repeat actions, solidifying your understanding of how to control program flow.

================================================================================

# Bobalings Exercises for Chapter 06

--- Exercise: exercises/06_loops/for1.boba ---

//! The `for` loop is Boba's primary tool for iteration.
//! You can use it to loop over a range of numbers.
//!
//! The `..` operator creates a range that is exclusive of the end value.
//! For example, `0..5` includes 0, 1, 2, 3, and 4, but not 5.
//!
//! Your task is to complete the `for` loop with the correct range.
//!
//! When you are done, remove the `I AM NOT DONE` line below to move on.

// I AM NOT DONE

fn main() {
  // This `for` loop should print the numbers 0 through 4.
  // Complete the range syntax to make it loop 5 times.
  // The correct range is `0..5`.
  for i in /* your code here */ {
    print(f"Current number is: {i}");
  }
}

--- Exercise: exercises/06_loops/for2.boba ---

//! In addition to the exclusive range `..`, Boba also provides an
//! inclusive range operator, `..=`.
//!
//! The `..=` operator creates a range that includes the end value.
//! For example, `1..=5` includes 1, 2, 3, 4, and 5.
//!
//! Your task is to complete the `for` loop with the correct inclusive range.
//!
//! When you are done, remove the `I AM NOT DONE` line below to move on.

// I AM NOT DONE

fn main() {
  // This `for` loop should print the numbers 1 through 5.
  // Complete the range syntax to make it loop 5 times, including the number 5.
  // The correct range is `1..=5`.
  for i in /* your code here */ {
    print(f"Current number is: {i}");
  }
}

--- Exercise: exercises/06_loops/while1.boba ---

//! The `while` loop executes a block of code as long as a specified
//! condition remains `true`.
//!
//! It's important to ensure that the code inside the loop eventually
//! changes the condition to `false`, otherwise you will create an
//! infinite loop!
//!
//! Your task is to fix the infinite `while` loop.
//!
//! When you are done, remove the `I AM NOT DONE` line below to move on.

// I AM NOT DONE

fn main() {
  var counter = 0;

  // This `while` loop is infinite because the `counter` variable is never
  // changed. The condition `counter < 5` will always be true.
  // Add a line inside the loop to increment the counter.
  // For example: `counter = counter + 1` or `counter += 1`.
  while counter < 5 {
    print(f"Counter is: {counter}");
  }

  print("Loop finished!");
}

