# Lesson: 05-if-else

In Boba, conditional logic is used not only to control which code runs (as a statement), but also to evaluate to a value (as an expression). This makes `if/else` a powerful tool for both program flow and variable assignment. This allows developers to write more declarative code, often eliminating the need for temporary mutable variables, leading to safer and more concise logic.

## The `if` Statement

The `if` statement executes a block of code only if a specified condition is `true`.

```boba
var temperature: float = 30.0

if temperature > 25 {
  print("It's a hot day!")
}
```

## The `else` Statement

You can use the `else` statement to provide a block of code to execute if the `if` condition is `false`.

```boba
var score: int = 85

if score >= 60 {
  print("You passed!")
} else {
  print("You failed. Better luck next time!")
}
```

## The `else if` Statement

To handle multiple conditions, you can chain `if` statements with `else if`.

```boba
var hunger = "hungry"
var thirst = "thirsty"

if hunger == "hungry" and thirst == "thirsty" {
  print("You are hungry and thirsty.")
} else if hunger == "hungry" {
  print("You are only hungry.")
} else if thirst == "thirsty" {
  print("You are only thirsty.")
} else {
  print("You are neither hungry nor thirsty.")
}
```

### Using if as an Expression

In Boba, `if/else` blocks are expressions. The final expression in the chosen branch is the value that the entire block evaluates to. This value can then be assigned to a variable or returned from a function.

```boba
let health: int = 75

// The entire if/else expression evaluates to a single value.
let status: string = if health > 50 { "Healthy" } else { "Injured" }

print(f"Player status: {status}") // Outputs: Player status: Healthy
```

This concept isn't limited to single lines. Full `if/else` blocks are also expressions, meaning they can evaluate to a value that can be returned or assigned. This allows for very clean and readable logic without temporary mutable variables.

In Boba, `if/else` blocks are expressions. The final expression in the chosen branch is the value that the entire block evaluates to. This value can then be assigned to a variable or returned from a function.
```boba
let player_health = 75

let armor_message: string = if player_health == 100 {
    print("Player is at full health.")
    "Wearing pristine, shining armor."
} else if player_health > 50 {
    "Wearing battle-worn, dented armor."
} else {
    "Wearing cracked and broken armor."
}

print(armor_message) // Outputs: Wearing battle-worn, dented armor.
```

Any statements before the final expression are executed for their side effects, but they do not affect the return value of the block. In that example, `print(...)` runs, and then the string literal that follows it becomes the value of that branch.

================================================================================

# Bobalings Exercises for Chapter 05

--- Exercise: exercises/05_if-else/if1.boba ---

//! In Boba, the condition in an `if` statement must explicitly evaluate
//! to a boolean (`true` or `false`). Unlike some other languages, you
//! cannot use non-boolean values like numbers or strings as conditions.
//! This is a safety feature that prevents common bugs.
//!
//! Your task is to fix the `if` statement to use a valid boolean condition.
//!
//! When you are done, remove the `I AM NOT DONE` line below to move on.

// I AM NOT DONE

fn main() {
  let number = 5;

  // The condition `number` is an integer, not a boolean.
  // This will cause a compile error.
  // Change the condition to a boolean expression, for example, `number == 5`.
  if number {
    print("The number is 5!");
  }
}

--- Exercise: exercises/05_if-else/if2.boba ---

//! Often, you want to do one thing if a condition is true, and a
//! different thing if it's false. You can do this with two `if`
//! statements, but it's cleaner and more idiomatic to use an `if/else`
//! block.
//!
//! Your task is to refactor the two `if` statements into one `if/else` block.
//!
//! When you are done, remove the `I AM NOT DONE` line below to move on.

// I AM NOT DONE

fn main() {
  let number = 7;

  // These two `if` statements are opposites.
  // Combine them into a single `if/else` block for better readability.
  //
  // if number < 10 {
  //   print("The number is less than 10.");
  // } else {
  //   print("The number is 10 or greater.");
  // }
  //
  if number < 10 {
    print("The number is less than 10.");
  }
  if number >= 10 {
    print("The number is 10 or greater.");
  }
}

--- Exercise: exercises/05_if-else/if3.boba ---

//! To handle multiple conditions, you can chain `if` and `else if`
//! statements together. This is much cleaner than nesting `if/else` blocks.
//!
//! The structure looks like this:
//! if condition1 {
//!   // ...
//! } else if condition2 {
//!   // ...
//! } else {
//!   // ...
//! }
//!
//! Your task is to refactor the nested `if/else` into an `if/else if/else` chain.
//!
//! When you are done, remove the `I AM NOT DONE` line below to move on.

// I AM NOT DONE

fn main() {
  let number = 0;

  // This nested `if/else` is hard to read.
  // Refactor it into a single `if/else if/else` chain.
  if number > 0 {
    print("The number is positive.");
  } else {
    if number < 0 {
      print("The number is negative.");
    } else {
      print("The number is zero.");
    }
  }
}

--- Exercise: exercises/05_if-else/if4.boba ---

//! For simple conditional assignments, Boba provides a clean, one-line
//! `if/else` expression. This is a readable way to choose between two values.
//!
//! The syntax is: `let variable = if condition { value_if_true } else { value_if_false };`
//!
//! This is similar to the ternary operator (`? :`) in other languages, but
//! is designed for greater readability.
//!
//! Your task is to use the one-liner `if/else` expression to assign a value.
//!
//! When you are done, remove the `I AM NOT DONE` line below to move on.

// I AM NOT DONE

fn main() {
  let temperature = 25;

  // Use a one-liner `if/else` expression to set the `weather` variable.
  // If the temperature is greater than 20, it should be "warm".
  // Otherwise, it should be "cool".
  let weather: string = /* your code here */;

  print(f"The weather is {weather}.");
}

